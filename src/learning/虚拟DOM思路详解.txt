虚拟DOM 思路详解：
第一次最简单思路：
1. state 数据；
2. JSX 模板；
3. 数据 + 模板 结合，生成真实的 DOM 来显示；
4. state 发生变化；
5. 数据 + 模板 结合，生成真实的 DOM 替换原始的DOM 来显示；

缺陷：
1. 第一次生成了一个完整的DOM片段；
2. 第二次生成了一个完整的DOM片段；
3. 第二次的DOM 替换了第一次的DOM，非常消耗性能；

第二次进阶思路：
1. state 数据；
2. JSX 模板；
3. 数据 + 模板 结合，生成真实的 DOM 来显示；
4. state 发生变化；
5. 数据 + 模板 结合，生成真实的 DOM，并不替换原始的 DOM；
6. 新的 DOM（DocumentFragment） 和原始的 DOM 作比较，找出差异；
7. 找出 input 框发生改变；
8. 只用新的 DOM中的 input元素，替换掉老的 DOM 中的 input元素；

缺陷：
由于需要 DOM作比较，性能提升并不明显；

第三次高级思路：
1. state 数据；
2. JSX 模板；
3. 数据 + 模板 结合，生成真实的 DOM 来显示:（这里是为了方便解释,生成的顺序不一定是正确的；）
<div id="abc"><span>hello world</span></div> ;
4. 生成虚拟 DOM（虚拟 DOM就是一个JS对象，用它来描述真实的 DOM）:
['div', {id: 'abc'}, ['span', {}, 'hello world']]；
5. state 发生变化；
6. 生成 新的虚拟的DOM：
['div', {id: 'abc'}, ['span', {}, 'bye bye']]；
7. 比较原始虚拟 DOM 和新的 DOM 的区别，找到区别是 span中的内容（极大的提升性能）；
8. 直接操作 DOM，改变 span中的内容；

